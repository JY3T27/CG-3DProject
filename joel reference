#include <GL/glut.h>
#include <GL/gl.h> 
#include <cmath>
#include "stb_image.h"

#define PI 3.141592653
#define SCREEN_WIDTH	1600
#define SCREEN_HEIGHT	900
#define FPS	30

float cameraDistance = 5;

//float cameraX = 6;
//float cameraY = 2.0;
//float cameraZ = 0.0009;
float cameraSpeed = 0.005f;
float cameraVerticalOffset = 0.0f;
float cameraVerticalSpeed = 0.005f;
float scale = 2;

GLuint texture1; // Texture ID

void loadTexture(const char* fileName) {
	int width, height, numChannels;
	unsigned char* imageData = stbi_load(fileName, &width, &height, &numChannels, 0);
	if (!imageData) {
		printf("Failed to load texture: %s\n", fileName);
		return;
	}

	glGenTextures(1, &texture1);
	glBindTexture(GL_TEXTURE_2D, texture1);


	// Set texture parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

	// Specify the texture image data
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, imageData);

	stbi_image_free(imageData);
}

void floor()
{
	/*
	glBegin(GL_QUADS);
	glColor3f(0.5, 0.5, 0.5);
	glTexCoord3f(0.0f, 0.0f, -5.0f); glVertex3f(-10.0f, -10.0f, -5.0f);
	glTexCoord3f(10.0f, 0.0f, -5.0f); glVertex3f(10.0f, -10.0f, -5.0f);
	glTexCoord3f(10.0f, 10.0f, -5.0f); glVertex3f(10.0f, 10.0f, -5.0f);
	glTexCoord3f(0.0f, 10.0f, -5.0f); glVertex3f(-10.0f, 10.0f, -5.0f);
	glEnd();
		glBegin(GL_QUADS);
	glColor3f(1.0 * scale, 0.0 * scale, 1.0 * scale);
	glTexCoord3f(0.0, 0.0, 2.0 * scale); glVertex3f(-2.0 * scale, -0.45 * scale, 2.0 * scale);
	glTexCoord3f(2.0 * scale, 0.0, 2.0 * scale); glVertex3f(2.0 * scale, -0.45 * scale, 2.0 * scale);
	glTexCoord3f(2.0 * scale, -0.45 * scale, 2.0 * scale); glVertex3f(2.0 * scale, -0.45 * scale, -2.0 * scale);
	glTexCoord3f(0, -0.45 * scale, -2.0 * scale); glVertex3f(-2.0 * scale, -0.45 * scale, -2.0 * scale);

	*/
	glBegin(GL_QUADS);
	glColor3f(1.0 * scale, 0.0 * scale, 1.0 * scale);
	glTexCoord2f(0.0f, 0.0f); // Texture coordinate for the first vertex
	glVertex3f(-2.0 * scale, -0.45 * scale, 2.0 * scale);
	glTexCoord2f(1.0f, 0.0f); // Texture coordinate for the second vertex
	glVertex3f(2.0 * scale, -0.45 * scale, 2.0 * scale);
	glTexCoord2f(1.0f, 1.0f); // Texture coordinate for the third vertex
	glVertex3f(2.0 * scale, -0.45 * scale, -2.0 * scale);
	glTexCoord2f(0.0f, 1.0f); // Texture coordinate for the fourth vertex
	glVertex3f(-2.0 * scale, -0.45 * scale, -2.0 * scale);
	glEnd();
}

void cube()
{
	// Draw the cuboid
	glBegin(GL_QUADS);

	// Front face
	glColor3f(1.0, 0.0, 0.0); // Red color
	glVertex3f(-1.0 * scale, -0.2 * scale, 1.0 * scale); // Adjusted y-coordinate
	glVertex3f(1.0 * scale, -0.2 * scale, 1.0 * scale); // Adjusted y-coordinate
	glVertex3f(1.0 * scale, 0.2 * scale, 1.0 * scale); // Adjusted y-coordinate
	glVertex3f(-1.0 * scale, 0.2 * scale, 1.0 * scale); // Adjusted y-coordinate

	// Right face
	glColor3f(0.0, 0.0, 1.0); // Blue color
	glVertex3f(1.0 * scale, -0.2 * scale, -1.0 * scale); // Adjusted y-coordinate
	glVertex3f(1.0 * scale, -0.2 * scale, 1.0 * scale); // Adjusted y-coordinate
	glVertex3f(1.0 * scale, 0.2 * scale, 1.0 * scale); // Adjusted y-coordinate
	glVertex3f(1.0 * scale, 0.2 * scale, -1.0 * scale); // Adjusted y-coordinate

	// Top face
	glColor3f(0.0, 1.0, 1.0); // Cyan color
	glVertex3f(-1.0 * scale, 0.2 * scale, 1.0 * scale); // Adjusted y-coordinate
	glVertex3f(1.0 * scale, 0.2 * scale, 1.0 * scale); // Adjusted y-coordinate
	glVertex3f(1.0 * scale, 0.2 * scale, -1.0 * scale); // Adjusted y-coordinate
	glVertex3f(-1.0 * scale, 0.2 * scale, -1.0 * scale); // Adjusted y-coordinate

	// Bottom face
	glColor3f(1.0, 0.0, 1.0); // Magenta color
	glVertex3f(-1.0 * scale, -0.2 * scale, 1.0 * scale); // Adjusted y-coordinate
	glVertex3f(1.0 * scale, -0.2 * scale, 1.0 * scale); // Adjusted y-coordinate
	glVertex3f(1.0 * scale, -0.2 * scale, -1.0 * scale); // Adjusted y-coordinate
	glVertex3f(-1.0 * scale, -0.2 * scale, -1.0 * scale); // Adjusted y-coordinate

	glEnd();
}

void drawLine3D(float startX, float startY, float startZ, float endX, float endY, float endZ)
{
	glBegin(GL_LINES);
	glColor3f(0.0, 0.0, 0.0);
	glVertex3f(startX, startY, startZ);
	glVertex3f(endX, endY, endZ);
	glEnd();
}

void drawCylinder(float radius, float height)
{
	const int numSegments = 30;
	const float segmentAngle = 2.0 * PI / numSegments;

	glBegin(GL_QUAD_STRIP);

	glColor3f(0.5, 0.5, 0.5);

	for (int i = 0; i <= numSegments; ++i)
	{
		float angle = segmentAngle * i;
		float x = radius * cos(angle);
		float z = radius * sin(angle);

		glVertex3f(x, height / 2.0, z);
		glVertex3f(x, -height / 2.0, z);
	}

	glEnd();
}

void groupCylinder()
{

	glPushMatrix();
	glTranslatef(1.0 * scale, 1.0, 1.0 * scale);
	drawCylinder(0.03 , 1.2);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(1.0 * scale, 1.0, -1.0 * scale);
	drawCylinder(0.03 , 1.2);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-1.0 * scale, 1.0, -1.0 * scale);
	drawCylinder(0.03 , 1.2);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-1.0 * scale, 1.0, 1.0 * scale);
	drawCylinder(0.03 , 1.2);
	glPopMatrix();
}

void groupLines()
{
	drawLine3D(1.0 * scale, 1.0 , 1.0 * scale, 1.0 * scale, 1.0 , -1.0 * scale);
	drawLine3D(1.0 * scale, 1.0, 1.0 * scale, -1.0 * scale, 1.0, 1.0 * scale);
	drawLine3D(-1.0 * scale, 1.0, 1.0 * scale, -1.0 * scale, 1.0 , -1.0 * scale);
	drawLine3D(1.0 * scale, 1.0, -1.0 * scale, -1.0 * scale, 1.0, -1.0 * scale);

	drawLine3D(1.0 * scale, 0.8, 1.0 * scale, 1.0 * scale, 0.8, -1.0 * scale);
	drawLine3D(1.0 * scale, 0.8, 1.0 * scale, -1.0 * scale, 0.8, 1.0 * scale);
	drawLine3D(-1.0 * scale, 0.8, 1.0 * scale, -1.0 * scale, 0.8, -1.0 * scale);
	drawLine3D(1.0 * scale, 0.8, -1.0 * scale, -1.0 * scale, 0.8, -1.0 * scale);

	drawLine3D(1.0 * scale, 1.2, 1.0 * scale, 1.0 * scale, 1.2, -1.0 * scale);
	drawLine3D(1.0 * scale, 1.2, 1.0 * scale, -1.0 * scale, 1.2, 1.0 * scale);
	drawLine3D(-1.0 * scale, 1.2, 1.0 * scale, -1.0 * scale, 1.2, -1.0 * scale);
	drawLine3D(1.0 * scale, 1.2, -1.0 * scale, -1.0 * scale, 1.2, -1.0 * scale);

	}

void camera()
{
	// Update camera position
	if (cameraDistance > 4.0f) {
		cameraDistance -= cameraSpeed;
		if (cameraDistance < 4.0f) {
			cameraDistance = 4.0f;
		}
		else {
			cameraVerticalOffset -= cameraVerticalSpeed;
			if (cameraVerticalOffset < -1.0f) {
				cameraVerticalOffset = -1.0f;
			}
		}
	}
	

	gluLookAt(cameraDistance, cameraDistance + cameraVerticalOffset, cameraDistance,  // camera position
		0.0, 0.0, 0.0,                                // target position
		0.0, 1.0, 0.0);                               // up vector
}

void drawSphere(float radius, int slices, int stacks) {
	float theta, phi;
	float thetaStep = 2.0f * PI / slices;
	float phiStep = PI / stacks;

	for (int i = 0; i < stacks; ++i) {
		phi = -PI / 2.0f + i * phiStep; // Start from the bottom and go upwards

		glBegin(GL_TRIANGLE_STRIP);
		for (int j = 0; j <= slices; ++j) {
			theta = j * thetaStep;

			// Calculate the vertex positions
			float x = radius * std::cos(phi) * std::cos(theta);
			float y = radius * std::sin(phi);
			float z = radius * std::cos(phi) * std::sin(theta);

			glNormal3f(x, y, z);
			glTexCoord2f(static_cast<float>(j) / slices, static_cast<float>(i) / stacks); // Set texture coordinates
			glVertex3f(x, y, z);

			// Calculate the vertex positions for the next stack
			x = radius * std::cos(phi + phiStep) * std::cos(theta);
			y = radius * std::sin(phi + phiStep);
			z = radius * std::cos(phi + phiStep) * std::sin(theta);

			glNormal3f(x, y, z);
			glTexCoord2f(static_cast<float>(j) / slices, static_cast<float>(i + 1) / stacks); // Set texture coordinates
			glVertex3f(x, y, z);
		}
		glEnd();
	}
}

void texture()
{

	glColor3f(0.5, 0.5, 0.5);
	drawSphere(15, 10, 10);

	glFlush();
	glDisable(GL_TEXTURE_2D);
}

void display()
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	camera();

	glEnable(GL_TEXTURE_2D);
	glBindTexture(GL_TEXTURE_2D, texture1);

	texture();
	floor();

	cube();
	groupCylinder();
	groupLines();

	glFlush();
	glutSwapBuffers();
}

void initGL()
{
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glPointSize(10.0);
	glLineWidth(5.0);


	// lights
	glEnable(GL_COLOR_MATERIAL); // cheat!!!!
	glEnable(GL_LIGHTING);

	GLfloat dir[] = { 0.2, 0.0, 1.0, 0.0 };
	glLightfv(GL_LIGHT0, GL_POSITION, dir);
	glEnable(GL_LIGHT0);

	// depth buffer
	glEnable(GL_DEPTH_TEST);
}

void reshape(int width, int height)
{
	glViewport(0, 0, width, height);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(45.0, (double)width / (double)height, 1.0, 100.0);
}

void timer(int value)
{
	glutPostRedisplay();
	glutTimerFunc(16, timer, 0);
}

int main(int argc, char** argv)
{

	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);
	glutInitWindowSize(1600, 800);
	glutCreateWindow("Cube Example");
	glutDisplayFunc(display);
	glutReshapeFunc(reshape);
	glutTimerFunc(0, timer, 0);
	glEnable(GL_DEPTH_TEST);
	loadTexture("D:/Desktop/cg images/tt.jpg");

	glutMainLoop();
	return 0;
}
