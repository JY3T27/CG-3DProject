#include <stdio.h>
#include <windows.h>
#include <stdlib.h>
#include <gl/gL.h>
#include <gl/glu.h>
#include <gl/glut.h>
#include <math.h>

#define PI 3.141592653
#define SCREEN_WIDTH	500
#define SCREEN_HEIGHT	500
#define FPS	30

float angle = 0.0;

bool rotate1 = false; // false = increase

void basicHuman() {
	glPushMatrix();
		glColor3f(0.95f, 0.75f, 0.6f);
		glScaled(1.0, 1.0, 1.0);
		glTranslated(0.0, 2.0, 0.0);
		glutSolidCube(2.0);
	glPopMatrix();

	glPushMatrix();
		glColor3f(0.9f, 0.9f, 0.5f);
		glScaled(0.8, 1.0, 0.5);
		glTranslated(0.0, -0.5, 0.0);
		glutSolidCube(3.0);
	glPopMatrix();
}

void hand() {
	glPushMatrix();
		glColor3f(0.9f, 0.9f, 0.5f);
		glScaled(4.0, 1.0, 1.0);
		glutSolidCube(2.0);
	glPopMatrix();
}

void display() {
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glPushMatrix();
		glTranslatef(3.0, 0.0, 0.0);
		glRotatef(angle, 0.0, 0.0, 1.0);
		glTranslatef(-3.0, 0.0, 0.0);
		hand();
	glPopMatrix();


	glFlush();
	glutSwapBuffers();
}

void idle() {
	DWORD start = GetTickCount64();
	while (GetTickCount64() - start < 1000 / FPS);

	
	if (angle >= -90.0 && rotate1 == false)
	{
		angle -= 10;
		if (angle == -90.0)
		{
			rotate1 = true;
		}
	}
	if (rotate1 == true)
	{
		angle += 10;
		if (angle == 0.0)
		{
			rotate1 = false;
		}
	}

	glutPostRedisplay();

}

void initGL() {
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glPointSize(10.0);
	glLineWidth(5.0);

	// camera setup
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	//glOrtho(-10, 10, -10, 10, 0.5, 1000.0);
	gluPerspective(45.0, 1.0, 0.0001, 1000.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(-10.0, 10.0, 20.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0); // CAMERA CODE 

	// lights
	glEnable(GL_COLOR_MATERIAL); // cheat!!!!
	glEnable(GL_LIGHTING);
	GLfloat dir[] = { 0.2, 0.0, 1.0, 0.0 };
	glLightfv(GL_LIGHT0, GL_POSITION, dir);
	glEnable(GL_LIGHT0);

	// depth buffer
	glEnable(GL_DEPTH_TEST);
}

int main(int argc, char** argv) {
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_DEPTH);
	glutInit(&argc, argv);
	glutInitWindowSize(SCREEN_WIDTH, SCREEN_HEIGHT);
	glutCreateWindow("Test");
	glutDisplayFunc(display);
	glutIdleFunc(idle);
	initGL();

	glutMainLoop();
}
