#include <stdio.h>
#include <windows.h>
#include <stdlib.h>
#include <gl/gL.h>
#include <gl/glu.h>
#include <gl/glut.h>
#include <math.h>
#include "stb_image.h"

#include <time.h>
#include <chrono>
#include <thread>


#define PI 3.141592653
#define SCREEN_WIDTH	1600
#define SCREEN_HEIGHT	900
#define FPS 30

GLuint textureID;
int imageWidth, imageHeight, imageChannels;

void loadTexture()
{
	// Load image using stb_image.h library
	unsigned char* image = stbi_load("C:/Users/HP/Downloads/tt.rgb", &imageWidth, &imageHeight, &imageChannels, 0);

	// Generate a texture ID
	glGenTextures(1, &textureID);

	// Bind the texture
	glBindTexture(GL_TEXTURE_2D, textureID);

	// Set texture parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

	// Load the image data into the texture
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, imageWidth, imageHeight, 0, GL_RGB, GL_UNSIGNED_BYTE, image);

	// Free the image data
	stbi_image_free(image);
}


void display() {
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glBegin(GL_QUADS);
	//Top Which side color
	glColor3ub(178, 34, 34);
	glVertex3f(3.0, 10.0, -1.0);
	glVertex3f(-3.0, 10.0, -1.0);
	glVertex3f(-3.0, 8.0, -1.0);
	glVertex3f(3.0, 8.0, -1.0);

	//main entrance
	glColor3ub(240, 230, 140);
	glVertex3f(3.0, 8.0, -1.0);
	glVertex3f(-3.0, 8.0, -1.0);
	glVertex3f(-3.0, 0.0, -1.0);
	glVertex3f(3.0, 0.0, -1.0);

	//side stage
	glColor3ub(25, 25, 112);
	glVertex3f(3.0, 10.0, -1.0);
	glVertex3f(3.0, 0.0, -1.0);
	glVertex3f(15.0, 0.0, 20.0);
	glVertex3f(15.0, 12.0, 20.0);

	glVertex3f(-3.0, 10.0, -1.0);
	glVertex3f(-3.0, 0.0, -1.0);
	glVertex3f(-15.0, 0.0, 20.0);
	glVertex3f(-15.0, 12.0, 20.0);

	// Enable texturing
	glEnable(GL_TEXTURE_2D);
	glBindTexture(GL_TEXTURE_2D, textureID);

	glBegin(GL_QUADS);
	glTexCoord3f(0.0f, 0.0f, -3.0f); glVertex3f(20.0, 20.0, -3.0);
	glTexCoord3f(1.0f, 0.0f, -3.0f); glVertex3f(-20.0, 20.0, -3.0);
	glTexCoord3f(1.0f, 1.0f, -3.0f); glVertex3f(-20.0, 2.0, -3.0);
	glTexCoord3f(0.0f, 1.0f, -3.0f); glVertex3f(20.0, 2.0, -3.0);
	glEnd();

	glDisable(GL_TEXTURE_2D);


	glEnd();


	glFlush();
	glutSwapBuffers();
}

void idle() {
	DWORD start = GetTickCount64();
	while (GetTickCount64() - start < 1000 / FPS);


	

	glutPostRedisplay();
}

void initGL() {
	glClearColor(0.15, 0.15, 0.15, 1.0);
	glPointSize(10.0);
	glLineWidth(5.0);

	// camera setup
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	//glOrtho(-10, 10, -10, 10, 0.5, 1000.0);
	gluPerspective(45.0, 1.0, 0.0001, 1000.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(0.0, 5.0, 50.0,  // camera position 
			  0.0, 10.0, 0.0,   // camera direction 
			  0.0, 1.0, 0.0); 

	// lights
	glEnable(GL_COLOR_MATERIAL); // cheat!!!!
	glEnable(GL_LIGHTING);
	GLfloat dir[] = { 0.2, 0.0, 1.0, 0.0 };
	glLightfv(GL_LIGHT0, GL_POSITION, dir);
	glEnable(GL_LIGHT0);

	// depth buffer
	glEnable(GL_DEPTH_TEST);
}

void reshape(int width, int height)
{
	glViewport(0, 0, width, height);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(45.0, (double)width / (double)height, 1.0, 100.0);
}

int main(int argc, char** argv) {
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_DEPTH);
	glutInit(&argc, argv);
	glutInitWindowSize(SCREEN_WIDTH, SCREEN_HEIGHT);
	glutCreateWindow("Test");
	loadTexture();
	glutDisplayFunc(display);
	glutIdleFunc(idle);
	
	initGL();
 // Call the function to load the texture


	glutMainLoop();
}
